/* Generated by re2c */
// Copyright 2011 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "lexer.h"

#include <stdio.h>

#include "eval_env.h"
#include "util.h"

using namespace std;

bool Lexer::Error(const string& message, string* err) {
  // Compute line/column.
  int line = 1;
  const char* line_start = input_.str_;
  for (const char* p = input_.str_; p < last_token_; ++p) {
    if (*p == '\n') {
      ++line;
      line_start = p + 1;
    }
  }
  int col = last_token_ ? (int)(last_token_ - line_start) : 0;

  char buf[1024];
  snprintf(buf, sizeof(buf), "%s:%d: ", filename_.AsString().c_str(), line);
  *err = buf;
  *err += message + "\n";

  // Add some context to the message.
  const int kTruncateColumn = 72;
  if (col > 0 && col < kTruncateColumn) {
    int len;
    bool truncated = true;
    for (len = 0; len < kTruncateColumn; ++len) {
      if (line_start[len] == 0 || line_start[len] == '\n') {
        truncated = false;
        break;
      }
    }
    *err += string(line_start, len);
    if (truncated)
      *err += "...";
    *err += "\n";
    *err += string(col, ' ');
    *err += "^ near here";
  }

  return false;
}

Lexer::Lexer(const char* input) {
  Start("input", input);
}

void Lexer::Start(StringPiece filename, StringPiece input) {
  filename_ = filename;
  input_ = input;
  ofs_ = input_.str_;
  last_token_ = NULL;
}

const char* Lexer::TokenName(Token t) {
  switch (t) {
  case ERROR:
    return "lexing error";
  case BUILD:
    return "'build'";
  case COLON:
    return "':'";
  case DEFAULT:
    return "'default'";
  case EQUALS:
    return "'='";
  case IDENT:
    return "identifier";
  case INCLUDE:
    return "'include'";
  case INDENT:
    return "indent";
  case NEWLINE:
    return "newline";
  case PIPE2:
    return "'||'";
  case PIPE:
    return "'|'";
  case PIPEAT:
    return "'|@'";
  case POOL:
    return "'pool'";
  case RULE:
    return "'rule'";
  case SUBNINJA:
    return "'subninja'";
  case TEOF:
    return "eof";
  }
  return NULL;  // not reached
}

const char* Lexer::TokenErrorHint(Token expected) {
  switch (expected) {
  case COLON:
    return " ($ also escapes ':')";
  default:
    return "";
  }
}

string Lexer::DescribeLastError() {
  return "lexing error";
}

void Lexer::UnreadToken() {
  ofs_ = last_token_;
}

Lexer::Token Lexer::ReadToken() {
  const char* p = ofs_;
  const char* q;
  const char* start;
  Lexer::Token token;
  for (;;) {
    start = p;
    
{
	unsigned char yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		176, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 192, 192, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 128, 128, 128, 128, 192, 
		128, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 192, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	yych = *p;
	if (yybm[0+yych] & 32) {
		goto yy12;
	}
	if (yych <= 'Z') {
		if (yych <= '#') {
			if (yych <= '\n') {
				if (yych <= 0x00) goto yy2;
				if (yych <= 0x08) goto yy4;
				if (yych <= '\t') goto yy6;
				goto yy9;
			} else {
				if (yych == '\r') goto yy11;
				if (yych <= '"') goto yy4;
				goto yy14;
			}
		} else {
			if (yych <= '9') {
				if (yych <= ',') goto yy4;
				if (yych == '/') goto yy4;
				goto yy15;
			} else {
				if (yych <= '<') {
					if (yych <= ':') goto yy18;
					goto yy4;
				} else {
					if (yych <= '=') goto yy20;
					if (yych <= '@') goto yy4;
					goto yy15;
				}
			}
		}
	} else {
		if (yych <= 'i') {
			if (yych <= 'a') {
				if (yych == '_') goto yy15;
				if (yych <= '`') goto yy4;
				goto yy15;
			} else {
				if (yych <= 'c') {
					if (yych <= 'b') goto yy22;
					goto yy15;
				} else {
					if (yych <= 'd') goto yy23;
					if (yych <= 'h') goto yy15;
					goto yy24;
				}
			}
		} else {
			if (yych <= 'r') {
				if (yych == 'p') goto yy25;
				if (yych <= 'q') goto yy15;
				goto yy26;
			} else {
				if (yych <= 'z') {
					if (yych <= 's') goto yy27;
					goto yy15;
				} else {
					if (yych == '|') goto yy28;
					goto yy4;
				}
			}
		}
	}
yy2:
	++p;
	{ token = TEOF;     break; }
yy4:
	++p;
yy5:
	{ token = ERROR;    break; }
yy6:
	yych = *++p;
	if (yybm[0+yych] & 16) {
		goto yy6;
	}
yy8:
	{ token = INDENT;   break; }
yy9:
	++p;
	{ token = NEWLINE;  break; }
yy11:
	yych = *++p;
	if (yych == '\n') goto yy30;
	goto yy5;
yy12:
	yyaccept = 0;
	yych = *(q = ++p);
	if (yybm[0+yych] & 32) {
		goto yy12;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy8;
		if (yych <= '\t') goto yy6;
		if (yych <= '\n') goto yy9;
		goto yy8;
	} else {
		if (yych <= '\r') goto yy32;
		if (yych == '#') goto yy34;
		goto yy8;
	}
yy14:
	yyaccept = 1;
	yych = *(q = ++p);
	if (yych <= 0x00) goto yy5;
	goto yy35;
yy15:
	yych = *++p;
yy16:
	if (yybm[0+yych] & 64) {
		goto yy15;
	}
	{ token = IDENT;    break; }
yy18:
	++p;
	{ token = COLON;    break; }
yy20:
	++p;
	{ token = EQUALS;   break; }
yy22:
	yych = *++p;
	if (yych == 'u') goto yy38;
	goto yy16;
yy23:
	yych = *++p;
	if (yych == 'e') goto yy39;
	goto yy16;
yy24:
	yych = *++p;
	if (yych == 'n') goto yy40;
	goto yy16;
yy25:
	yych = *++p;
	if (yych == 'o') goto yy41;
	goto yy16;
yy26:
	yych = *++p;
	if (yych == 'u') goto yy42;
	goto yy16;
yy27:
	yych = *++p;
	if (yych == 'u') goto yy43;
	goto yy16;
yy28:
	yych = *++p;
	if (yych == '@') goto yy44;
	if (yych == '|') goto yy46;
	{ token = PIPE;     break; }
yy30:
	++p;
	{ token = NEWLINE;  break; }
yy32:
	yych = *++p;
	if (yych == '\n') goto yy30;
yy33:
	p = q;
	if (yyaccept == 0) {
		goto yy8;
	} else {
		goto yy5;
	}
yy34:
	yych = *++p;
yy35:
	if (yybm[0+yych] & 128) {
		goto yy34;
	}
	if (yych <= 0x00) goto yy33;
	++p;
	{ continue; }
yy38:
	yych = *++p;
	if (yych == 'i') goto yy48;
	goto yy16;
yy39:
	yych = *++p;
	if (yych == 'f') goto yy49;
	goto yy16;
yy40:
	yych = *++p;
	if (yych == 'c') goto yy50;
	goto yy16;
yy41:
	yych = *++p;
	if (yych == 'o') goto yy51;
	goto yy16;
yy42:
	yych = *++p;
	if (yych == 'l') goto yy52;
	goto yy16;
yy43:
	yych = *++p;
	if (yych == 'b') goto yy53;
	goto yy16;
yy44:
	++p;
	{ token = PIPEAT;   break; }
yy46:
	++p;
	{ token = PIPE2;    break; }
yy48:
	yych = *++p;
	if (yych == 'l') goto yy54;
	goto yy16;
yy49:
	yych = *++p;
	if (yych == 'a') goto yy55;
	goto yy16;
yy50:
	yych = *++p;
	if (yych == 'l') goto yy56;
	goto yy16;
yy51:
	yych = *++p;
	if (yych == 'l') goto yy57;
	goto yy16;
yy52:
	yych = *++p;
	if (yych == 'e') goto yy59;
	goto yy16;
yy53:
	yych = *++p;
	if (yych == 'n') goto yy61;
	goto yy16;
yy54:
	yych = *++p;
	if (yych == 'd') goto yy62;
	goto yy16;
yy55:
	yych = *++p;
	if (yych == 'u') goto yy64;
	goto yy16;
yy56:
	yych = *++p;
	if (yych == 'u') goto yy65;
	goto yy16;
yy57:
	yych = *++p;
	if (yybm[0+yych] & 64) {
		goto yy15;
	}
	{ token = POOL;     break; }
yy59:
	yych = *++p;
	if (yybm[0+yych] & 64) {
		goto yy15;
	}
	{ token = RULE;     break; }
yy61:
	yych = *++p;
	if (yych == 'i') goto yy66;
	goto yy16;
yy62:
	yych = *++p;
	if (yybm[0+yych] & 64) {
		goto yy15;
	}
	{ token = BUILD;    break; }
yy64:
	yych = *++p;
	if (yych == 'l') goto yy67;
	goto yy16;
yy65:
	yych = *++p;
	if (yych == 'd') goto yy68;
	goto yy16;
yy66:
	yych = *++p;
	if (yych == 'n') goto yy69;
	goto yy16;
yy67:
	yych = *++p;
	if (yych == 't') goto yy70;
	goto yy16;
yy68:
	yych = *++p;
	if (yych == 'e') goto yy72;
	goto yy16;
yy69:
	yych = *++p;
	if (yych == 'j') goto yy74;
	goto yy16;
yy70:
	yych = *++p;
	if (yybm[0+yych] & 64) {
		goto yy15;
	}
	{ token = DEFAULT;  break; }
yy72:
	yych = *++p;
	if (yybm[0+yych] & 64) {
		goto yy15;
	}
	{ token = INCLUDE;  break; }
yy74:
	yych = *++p;
	if (yych != 'a') goto yy16;
	yych = *++p;
	if (yybm[0+yych] & 64) {
		goto yy15;
	}
	{ token = SUBNINJA; break; }
}

  }

  last_token_ = start;
  ofs_ = p;
  if (token != NEWLINE && token != TEOF)
    EatWhitespace();
  return token;
}

bool Lexer::PeekToken(Token token) {
  Token t = ReadToken();
  if (t == token)
    return true;
  UnreadToken();
  return false;
}

void Lexer::EatWhitespace() {
  const char* p = ofs_;
  const char* q;
  for (;;) {
    ofs_ = p;
    
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	yych = *p;
	if (yybm[0+yych] & 128) {
		goto yy83;
	}
	if (yych <= 0x00) goto yy79;
	if (yych == '$') goto yy86;
	goto yy81;
yy79:
	++p;
	{ break; }
yy81:
	++p;
yy82:
	{ break; }
yy83:
	yych = *++p;
	if (yybm[0+yych] & 128) {
		goto yy83;
	}
	{ continue; }
yy86:
	yych = *(q = ++p);
	if (yych == '\n') goto yy87;
	if (yych == '\r') goto yy89;
	goto yy82;
yy87:
	++p;
	{ continue; }
yy89:
	yych = *++p;
	if (yych == '\n') goto yy91;
	p = q;
	goto yy82;
yy91:
	++p;
	{ continue; }
}

  }
}

bool Lexer::ReadIdent(string* out) {
  const char* p = ofs_;
  const char* start;
  for (;;) {
    start = p;
    
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0, 128, 128,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	yych = *p;
	if (yybm[0+yych] & 128) {
		goto yy97;
	}
	++p;
	{
      last_token_ = start;
      return false;
    }
yy97:
	yych = *++p;
	if (yybm[0+yych] & 128) {
		goto yy97;
	}
	{
      out->assign(start, p - start);
      break;
    }
}

  }
  last_token_ = start;
  ofs_ = p;
  EatWhitespace();
  return true;
}

bool Lexer::ReadEvalString(EvalString* eval, bool path, string* err) {
  const char* p = ofs_;
  const char* q;
  const char* start;
  for (;;) {
    start = p;
    
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,  16,  16,  16,  16,  16,  16,  16, 
		 16,  16,   0,  16,  16,   0,  16,  16, 
		 16,  16,  16,  16,  16,  16,  16,  16, 
		 16,  16,  16,  16,  16,  16,  16,  16, 
		 32,  16,  16,  16,   0,  16,  16,  16, 
		 16,  16,  16,  16,  16, 208, 144,  16, 
		208, 208, 208, 208, 208, 208, 208, 208, 
		208, 208,   0,  16,  16,  16,  16,  16, 
		 16, 208, 208, 208, 208, 208, 208, 208, 
		208, 208, 208, 208, 208, 208, 208, 208, 
		208, 208, 208, 208, 208, 208, 208, 208, 
		208, 208, 208,  16,  16,  16,  16, 208, 
		 16, 208, 208, 208, 208, 208, 208, 208, 
		208, 208, 208, 208, 208, 208, 208, 208, 
		208, 208, 208, 208, 208, 208, 208, 208, 
		208, 208, 208,  16,   0,  16,  16,  16, 
		 16,  16,  16,  16,  16,  16,  16,  16, 
		 16,  16,  16,  16,  16,  16,  16,  16, 
		 16,  16,  16,  16,  16,  16,  16,  16, 
		 16,  16,  16,  16,  16,  16,  16,  16, 
		 16,  16,  16,  16,  16,  16,  16,  16, 
		 16,  16,  16,  16,  16,  16,  16,  16, 
		 16,  16,  16,  16,  16,  16,  16,  16, 
		 16,  16,  16,  16,  16,  16,  16,  16, 
		 16,  16,  16,  16,  16,  16,  16,  16, 
		 16,  16,  16,  16,  16,  16,  16,  16, 
		 16,  16,  16,  16,  16,  16,  16,  16, 
		 16,  16,  16,  16,  16,  16,  16,  16, 
		 16,  16,  16,  16,  16,  16,  16,  16, 
		 16,  16,  16,  16,  16,  16,  16,  16, 
		 16,  16,  16,  16,  16,  16,  16,  16, 
		 16,  16,  16,  16,  16,  16,  16,  16, 
	};
	yych = *p;
	if (yybm[0+yych] & 16) {
		goto yy104;
	}
	if (yych <= '\r') {
		if (yych <= 0x00) goto yy102;
		if (yych <= '\n') goto yy107;
		goto yy109;
	} else {
		if (yych <= ' ') goto yy107;
		if (yych <= '$') goto yy111;
		goto yy107;
	}
yy102:
	++p;
	{
      last_token_ = start;
      return Error("unexpected EOF", err);
    }
yy104:
	yych = *++p;
	if (yybm[0+yych] & 16) {
		goto yy104;
	}
	{
      eval->AddText(StringPiece(start, p - start));
      continue;
    }
yy107:
	++p;
	{
      if (path) {
        p = start;
        break;
      } else {
        if (*start == '\n')
          break;
        eval->AddText(StringPiece(start, 1));
        continue;
      }
    }
yy109:
	yych = *++p;
	if (yych == '\n') goto yy112;
	{
      last_token_ = start;
      return Error(DescribeLastError(), err);
    }
yy111:
	yych = *++p;
	if (yybm[0+yych] & 64) {
		goto yy124;
	}
	if (yych <= ' ') {
		if (yych <= '\f') {
			if (yych == '\n') goto yy116;
			goto yy114;
		} else {
			if (yych <= '\r') goto yy119;
			if (yych <= 0x1F) goto yy114;
			goto yy120;
		}
	} else {
		if (yych <= '/') {
			if (yych == '$') goto yy122;
			goto yy114;
		} else {
			if (yych <= ':') goto yy127;
			if (yych <= '`') goto yy114;
			if (yych <= '{') goto yy129;
			goto yy114;
		}
	}
yy112:
	++p;
	{
      if (path)
        p = start;
      break;
    }
yy114:
	++p;
yy115:
	{
      last_token_ = start;
      return Error("bad $-escape (literal $ must be written as $$)", err);
    }
yy116:
	yych = *++p;
	if (yybm[0+yych] & 32) {
		goto yy116;
	}
	{
      continue;
    }
yy119:
	yych = *++p;
	if (yych == '\n') goto yy130;
	goto yy115;
yy120:
	++p;
	{
      eval->AddText(StringPiece(" ", 1));
      continue;
    }
yy122:
	++p;
	{
      eval->AddText(StringPiece("$", 1));
      continue;
    }
yy124:
	yych = *++p;
	if (yybm[0+yych] & 64) {
		goto yy124;
	}
	{
      eval->AddSpecial(StringPiece(start + 1, p - start - 1));
      continue;
    }
yy127:
	++p;
	{
      eval->AddText(StringPiece(":", 1));
      continue;
    }
yy129:
	yych = *(q = ++p);
	if (yybm[0+yych] & 128) {
		goto yy133;
	}
	goto yy115;
yy130:
	yych = *++p;
	if (yych == ' ') goto yy130;
	{
      continue;
    }
yy133:
	yych = *++p;
	if (yybm[0+yych] & 128) {
		goto yy133;
	}
	if (yych == '}') goto yy136;
	p = q;
	goto yy115;
yy136:
	++p;
	{
      eval->AddSpecial(StringPiece(start + 2, p - start - 3));
      continue;
    }
}

  }
  last_token_ = start;
  ofs_ = p;
  if (path)
    EatWhitespace();
  // Non-path strings end in newlines, so there's no whitespace to eat.
  return true;
}
